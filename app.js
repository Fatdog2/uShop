
//Getting the dependencies
const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const fileUpload = require('express-fileupload');
const port = 3000;

//file Upload middleware
app.use(fileUpload())

//Body Parser Middleware
// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: false }))

// parse application/json
app.use(bodyParser.json())

//connect to db
mongoose.connect('mongodb://localhost:27017/uShop',{useNewUrlParser: true})
let db = mongoose.connection;
//check db connection 
db.once('open', function() {
    console.log('Connected to ' + db.name)
})
//check for db error
db.on('error', function(err) {
    console.log(err);
})


//Starting App (on localhost:3000)
app.listen(port, function() {
    console.log('Server started on port ' + port);
});

//Setting the public directory
app.use(express.static('public'));


//Setting up view engine (Pug)
var path = require('path');
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

//Rendering Home Page
app.get('/', function(req, res) {
    res.render('home');
});

//Rendering User Create Acc Page
app.get('/userCreateAcc/', function(req, res) {
    res.render('userCreateAcc')
});

//Rendering User Acc Page with errors
app.get('/userCreateAcc/noMatch/:field', function(req, res) {
    res.render('userCreateAcc', {
        field: req.params.field
    })
});

//Rendering Page if email already exists
app.get('/userCreateAcc/alreadyExist', function(req, res) {
    res.render('userCreateAcc', {
        exist: true
    })
});

//Rendering Shop Create Acc Page
app.get('/shopCreateAcc', function(req, res) {
    res.render('shopCreateAcc')
});


//Rendering the page when emails/password don't match
app.get('/shopCreateAcc/noMatch/:field', function(req, res) {
    res.render('shopCreateAcc', {
        field: req.params.field
    })
});

//Rendering the page when email or shop name already exist
app.get('/shopCreateAcc/alreadyExist/:resultType', function(req, res){
    res.render('shopCreateAcc', {
        resultType: req.params.resultType
    })
})


//Proccessing a Create User Acc Post Request
const User = require('./models/userModel')
app.post('/userCreateAcc', async function(req,res) {

    const data = req.body;
    //Searches if user with email already exists
    const userResult = await User.findOne({email: data.email})
    //Data validation
    if(data.email !== data.reEmail) {
        if(data.password !== data.rePassword) {
            //Tell user they need to have matching email and password
            return res.redirect('userCreateAcc/noMatch/email+password')
        }
    //Tell user they need to have matching email
    return res.redirect('userCreateAcc/noMatch/email')
    }
    else if(data.password !== data.rePassword) {
        return res.redirect('userCreateAcc/noMatch/password')
    }
    else if(userResult){
        return res.redirect('userCreateAcc/alreadyExist')
    }


    else {
    //Creating the User
    let user = new User();
    user.givenName = data.givenName;
    user.lastName = data.lastName;
    user.address = data.address;
    user.state = data.state;
    user.postcode = data.postcode;
    user.dob = data.dob;
    user.mobileNumber = data.mobileNumber;
    user.email = data.email;
    user.password = data.password;

    //Adding user to db (an object id is generated by mongo)
    user.save(function(err) {
        if(err) {
            console.log(err)
            return;
        } else {
            //Log the user has been created and direct to sign in page
            console.log("User created ---> "+user.givenName+" "+user.lastName)
            res.redirect('/signin')
        }
        
    })
    }
});

//Proccessing a Create Shop Acc Post Request
const Shop = require('./models/shopModel')
app.post('/shopCreateAcc', async function(req,res) {


    //making req.body a single variable - ease of use
    const data = req.body

    //Searching for Shop with same name and storing in variable
    const shopNameResult = await Shop.findOne({name: data.name});
    //Searching for Shop with same email and storing in variable
    const shopEmailResult = await Shop.findOne({email: data.email})
    
    //Data Validation
    if(data.email !== data.reEmail) {
        if(data.password !== data.rePassword) {
            //Tell user they need to have matching email and password
            return res.redirect('shopCreateAcc/noMatch/email+password')
        }
    //Tell user they need to have matching email
    return res.redirect('shopCreateAcc/noMatch/email')
    }
    else if(data.password !== data.rePassword) {
        //Tell the user they need to have matching password
        return res.redirect('shopCreateAcc/noMatch/password')
    }
    else if (shopNameResult) {
        //Tell the user a shop with that name already exists
        return res.redirect('shopCreateAcc/alreadyExist/name')
    }
    else if (shopEmailResult) {
        //Tell the user a shop with that email already exists
        return res.redirect('shopCreateAcc/alreadyExist/email')
    }
    else {

    //Creating the User
    let shop = new Shop();

    //Adding the categories to the categories array.
    switch(Number(data.categoryCount)){
        case 1:
            shop.categories.push(data.category1)
            break;
        case 2:
            shop.categories.push(data.category1)
            shop.categories.push(data.category2)
            break;
        case 3:
            shop.categories.push(data.category1)
            shop.categories.push(data.category2)
            shop.categories.push(data.category3)
            break;
    }

    //Adding the fields to the shop object
    shop.name = data.name;
    shop.email = data.email;
    shop.password = data.password;
    shop.sales = {
        items_sold: 0,
        orders: 0,
        revenue: 0,
        profit: 0,
        item_ranks: [],
    }
    shop.inventory = [];
    shop.img = 'placeholderimage-icon.png';
    shop.status = 'deactive';
    shop.itemCategories = [];
    shop.manufacturers = [];


    //Adding user to db (an object id is generated by mongo)
    shop.save(function(err) {
        if(err) {
            console.log(err)
            return;
        } else {
            console.log("Shop created ---> "+shop.name)
            res.redirect('/signin')
        }
        
    })
}
});

//Rendering Signin Page
app.get('/signin', function(req, res) {
    res.render('signin', {
        err: false,
    })
});

//Rendering Signin Page with err
app.get('/signin/err', function(req, res) {
    res.render('signin',{
        err: true,
    })
});

app.post('/signin', async function(req, res) {

    const data = req.body

    //Searches the shop db and the user db for a matching email + password
    const userResult = await User.findOne({ email: data.email, password: data.password }, '_id email password');
    const shopResult = await Shop.findOne({ email: data.email, password: data.password }, '_id email password');


    //If both dbs return nothing, then err
    if(!userResult && !shopResult) {
        return res.redirect('/signin/err');
      }
    
    //If db returns a user, send to user page
    if(userResult) {
        return res.redirect('/'+userResult._id + '/userhome')
      }
    
    //If db returns a shop, send to shop page
    if(shopResult) {
        return res.redirect('/'+shopResult._id + '/shophome')
      }

});

//Rendering the Shop home page (shop view)
app.get('/:id/shophome', async function(req, res) {

   
    //Setting the id as a variable
    const id = req.params.id
    //Searching for the shop and setting it as a variable
    const shop = await Shop.findById(id);

    //Sending the shop and the ammount of categories to pug
    res.render('shopHome', {
        shop: shop,
        categoryCount: shop.categories.length
    });
});


//Receiving Shop Page changes
app.post('/:id/shopEditAcc', async function(req, res) {

        //making req.body a single variable - ease of use
        const data = req.body

        //getting the shops id
        const shopId = req.params.id

        //getting the shop object
        const shop = await Shop.findOne({_id: shopId})

        //Searching for Shop with same name and storing in variable, 
        //thats not its current id. The $ne paramater makes sure
        //it isn't also searching for the current shops name.
        const shopNameResult = await Shop.findOne({name: data.name, _id: { $ne: shopId}});
        //Searching for Shop with same email and storing in variable.
        //Also applying the same $ne logic described above
        const shopEmailResult = await Shop.findOne({email: data.email, _id: { $ne: shopId}})

        //Data Validation
        if(data.email !== data.reEmail) {
            if(data.password !== data.rePassword) {
                //Tell user they need to have matching email and password
                return res.redirect('shopHome/noMatch/email+password')
            }
        //Tell user they need to have matching email
        return res.redirect('shopHome/noMatch/email')
        }
        else if(data.password !== data.rePassword) {
            //Tell the user they need to have matching password
            return res.redirect('shopHome/noMatch/password')
        }
        else if (shopNameResult) {
            //Tell the user a shop with that name already exists
            return res.redirect('shopHome/alreadyExist/name')
        }
        else if (shopEmailResult) {
            //Tell the user a shop with that email already exists
            return res.redirect('shopHome/alreadyExist/email')
        }
        else {

            
            //creating a new object for fields that are to be updated
            let updatedShop = {};

            //setting the fields
            updatedShop.email = data.email
            updatedShop.password = data.password
            updatedShop.name = data.name
            updatedShop.categories = []
            

            //Adding the categories on 
            switch(Number(data.categoryCount)){
                case 1:
                    updatedShop.categories.push(data.category1)
                    break;
                case 2:
                    updatedShop.categories.push(data.category1)
                    updatedShop.categories.push(data.category2)
                    break;
                case 3:
                    updatedShop.categories.push(data.category1)
                    updatedShop.categories.push(data.category2)
                    updatedShop.categories.push(data.category3)
                    break;
            }
            
            //Making sure there is an image to be saved
            if(!((req.files) == null)){
            //Saving the image
            let shopImg = req.files.imageFile
            //getting the extension of it
            const ext = shopImg.mimetype.split('/')[1];
            shopImg.mv(path.join(__dirname,'public/photo-storage/'+ shop._id + 'logo' + '.' + ext), function(err){
                if(err) {
                    console.log(err)
                }
            })
            updatedShop.img = shop._id + 'logo' + '.' + ext
            console.log(updatedShop.img)
        }
        console.log(req)
            //Making the query for the update function
            const updateQuery = {_id: shopId}

            Shop.updateOne(updateQuery, updatedShop, async function(err) {
                if(err) {
                    console.log(err)
                }
                else {
                    console.log('Updated Shop --> id: '+shop._id)

                    //return to shop home, with updated results
                    return res.redirect('/'+shopId+'/shopHome'+'/updated')
                }
            })

        }
    
});


app.get('/:id/shopHome/:err/:code', async function(req, res) {
    //Setting the id as a variable
    const id = req.params.id
    //Searching for the shop and setting it as a variable
    const shop = await Shop.findById(id);
    //Setting err to the err sent in the url
    const err = req.params.err

    //The following if statements determine sending varying
    //variables to the Pug file, which renders the page
    //differently depending on 
    if(err == 'noMatch'){
    res.render('shopHome', {
        shop: shop,
        categoryCount: shop.categories.length,
        field: req.params.code
    })
}
    if(err == 'alreadyExist') {
        res.render('shopHome', {
        shop: shop,
        categoryCount: shop.categories.length,
        resultType: req.params.code
        })
    }
})

//Rendering the page with a popup for update confirmation
app.get('/:id/shopHome/updated', async function(req, res) {
    //Setting the shop id as a variable
    const id = req.params.id

    //Searching for the shop and setting it as a variable 
    const shop = await Shop.findById(id)

    //Setting err to the err sent through the URL

    res.render('shopHome', {
        shop: shop,
        categoryCount: shop.categories.length,
        updated: true
    })

})


app.get('/logout', function(req, res) {
    res.redirect('/signin')
})


app.get('/:id/inventory', async function(req, res) {

        //Setting the shop id as a variable
        const id = req.params.id

        //Searching for the shop and setting it as a variable 
        const shop = await Shop.findById(id)

        //Getting the items

        const itemsFound = await Item.find({shopId: id})
        

    res.render('inventory', {
        shop: shop,
        items: itemsFound
    })
});



app.get('/:id/addItem', async function(req, res) {

     //Setting the shop id as a variable
     const id = req.params.id

     //Searching for the shop and setting it as a variable 
     const shop = await Shop.findById(id)
    res.render('addItem', {
        shop: shop
    })
})


//Getting item model
const Item = require('./models/itemModel')
app.post('/:id/addItem', async function(req, res) {

    const id = req.params.id
    const data = req.body
    const shop = await await Shop.findById(id)

    let item = new Item();
    
    //Setting the shop id to the id sent through params
    item.shopId = id

    //Setting all the variables to their corresponding components
    item.name = data.name;

    //Checking if the shop has opted to add a new category,
    //else just set the item.category equal to the value
    //in the select box.
    if(data.newCategory) {
        item.category = data.newCategory

        //Pushing the new category into the item categories array
        //inside the shop object
        let updatedShop = {}
        updatedShop.itemCategories = shop.itemCategories
        updatedShop.itemCategories.push(data.newCategory);


        const updateQuery = {_id: id}

        //Updating the record in mongodb
        Shop.updateOne(updateQuery, updatedShop, async function(err) {
            if(err) {
                console.log(err)
            }
            else {
                console.log('Updated Shop categories --> id: '+id)
            }
        });
    }

    else {
        item.category = data.category;
    }
    


    //Doing the same as above, although for manufacturer
    if(data.newManufacturer) {
        item.manufacturer = data.newManufacturer

        //Pushing the new category into the item categories array
        //inside the shop object
        let updatedShop = {}
        updatedShop.manufacturers = shop.manufacturers
        updatedShop.manufacturers.push(data.newManufacturer);


        const updateQuery = {_id: id}

        //Updating the record in mongodb
        Shop.updateOne(updateQuery, updatedShop, async function(err) {
            if(err) {
                console.log(err)
            }
            else {
                console.log('Updated Shop manufacturers --> new manufacturer: '+ item.manufacturer)
            }
        });
    }

    else {
        item.manufacturer = data.manufacturer;
    }
    


    item.retail_price = data.retail_price;
    item.buy_price = data.buy_price;

    //Setting stock to the intial stock
    item.stock = data.initialStock;

    //Setting the intial stock date to today
    item.stock_date = getDate();

    item.minStock = data.minStock;
    item.eor = data.eor;

    item.desc = data.desc;

    
    //First checking a file was submitted
    if(!((req.files) == null)){
        //Saving the image
        let itemImg = req.files.imageFile
        //getting the extension of it
        const ext = itemImg.mimetype.split('/')[1];

        //Moving the file to the photostorage folder
        //It is named as the items id and ending with itemImg + ext
        itemImg.mv(path.join(__dirname,'public/photo-storage/'+ item._id + 'itemImg' + '.' + ext), function(err){
            if(err) {
                console.log(err)
            }
        })
        //Setting the file name as a field in the item object
        item.img = item._id + 'itemImg' + '.' + ext
        
    }1

    //Saving the item to the db
    item.save(function(err) {
        if(err) {
            console.log(err)
            return;
        } else {
            //Log the user has been created and direct to sign in page
            console.log("Item created ---> "+item.name+" id:"+item._id)
            res.redirect('/'+id+'/inventory')
        }
    
    })





    

});

//Route for when the shop wants to add a new category
app.get('/:id/editCats', async function(req, res) {


        //Setting the shop id as a variable
        const id = req.params.id

         //Searching for the shop and setting it as a variable 
        const shop = await Shop.findById(id)
        res.render('addItem', {
            shop: shop,
            editingCat: true
        })
});


//Route for when the shop wants to add a new manufacturer
app.get('/:id/editManus', async function(req, res) {


     //Setting the shop id as a variable
     const id = req.params.id

     //Searching for the shop and setting it as a variable 
    const shop = await Shop.findById(id)
    res.render('addItem', {
        shop: shop,
        editingManu: true
    })
});



//Getting the date function
function getDate() {
    let date = new Date(); 

    let d = date.getDate();
    let m = date.getMonth();
    let y = date.getFullYear();

    let DateString = d + '/' + m + '/' + y
    
    return DateString;
}
